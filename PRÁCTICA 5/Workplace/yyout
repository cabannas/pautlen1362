;D:	main
;D:	{
;D:	int
;R10:	<tipo> ::= int 
;R9:	<clase_escalar> ::= <tipo> 
;R5:	<clase> ::= <clase_escalar> 
;D:	x
;R108:	<identificador> ::= TOK_IDENTIFICADOR 
;D:	,
;D:	resultado
;R108:	<identificador> ::= TOK_IDENTIFICADOR 
;D:	;
;R18:	<identificadores> ::= <identificador> 
;R19:	<identificadores> ::= <identificador> , <identificadores> 
;R4:	<declaracion> ::= <clase> <identificadores> ; 
;D:	function
;R2:	<declaraciones> ::= <declaracion> 
;D:	int
;R10:	<tipo> ::= int 
;D:	fibonacci
;D:	(
;D:	int
;R10:	<tipo> ::= int 
;D:	num1
;R27:	<parametro_funcion> ::= <tipo> <identificador> 
;D:	)
;R26:	<resto_parametros_funcion> ::= 
;R23:	<parametros_funcion> ::= <parametro_funcion> <resto_parametros_funcion> 
;D:	{
;D:	int
;R10:	<tipo> ::= int 
;R9:	<clase_escalar> ::= <tipo> 
;R5:	<clase> ::= <clase_escalar> 
;D:	res1
;R108:	<identificador> ::= TOK_IDENTIFICADOR 
;D:	,
;D:	res2
;R108:	<identificador> ::= TOK_IDENTIFICADOR 
;D:	;
;R18:	<identificadores> ::= <identificador> 
;R19:	<identificadores> ::= <identificador> , <identificadores> 
;R4:	<declaracion> ::= <clase> <identificadores> ; 
;D:	if
;R2:	<declaraciones> ::= <declaracion> 
;R28:	<declaraciones_funcion> ::= <declaraciones> 
;D:	(
;D:	(
;D:	num1
;D:	==
;R80:	<exp> ::= <identificador> 
;D:	0
;R104:	<constante_entera> ::= TOK_CONSTANTE_ENTERA 
;R100:	<constante> ::= <constante_entera> 
;R81:	<exp> ::= <constante> 
;D:	)
;R93:	<comparacion> ::= <exp> == <exp> 
;R83:	<exp> ::= ( <comparacion> ) 
;D:	)
;D:	{
;D:	return
;D:	0
;R104:	<constante_entera> ::= TOK_CONSTANTE_ENTERA 
;R100:	<constante> ::= <constante_entera> 
;R81:	<exp> ::= <constante> 
;D:	;
;R61:	<retorno_funcion> ::= return <exp> 
;R38:	<sentencia_simple> ::= <retorno_funcion> 
;R32:	<sentencia> ::= <sentencia_simple> ; 
;D:	}
;R30:	<sentencias> ::= <sentencia> 
;D:	if
;R50:	<condicional> ::= if ( <exp> ) { <sentencias> } 
;R40:	<bloque> ::= <condicional> 
;R33:	<sentencia> ::= <bloque> 
;D:	(
;D:	(
;D:	num1
;D:	==
;R80:	<exp> ::= <identificador> 
;D:	1
;R104:	<constante_entera> ::= TOK_CONSTANTE_ENTERA 
;R100:	<constante> ::= <constante_entera> 
;R81:	<exp> ::= <constante> 
;D:	)
;R93:	<comparacion> ::= <exp> == <exp> 
;R83:	<exp> ::= ( <comparacion> ) 
;D:	)
;D:	{
;D:	return
;D:	1
;R104:	<constante_entera> ::= TOK_CONSTANTE_ENTERA 
;R100:	<constante> ::= <constante_entera> 
;R81:	<exp> ::= <constante> 
;D:	;
;R61:	<retorno_funcion> ::= return <exp> 
;R38:	<sentencia_simple> ::= <retorno_funcion> 
;R32:	<sentencia> ::= <sentencia_simple> ; 
;D:	}
;R30:	<sentencias> ::= <sentencia> 
;D:	res1
;R50:	<condicional> ::= if ( <exp> ) { <sentencias> } 
;R40:	<bloque> ::= <condicional> 
;R33:	<sentencia> ::= <bloque> 
;D:	=
;D:	fibonacci
;D:	(
;D:	num1
;D:	-
;R80:	<exp> ::= <identificador> 
;D:	1
;R104:	<constante_entera> ::= TOK_CONSTANTE_ENTERA 
;R100:	<constante> ::= <constante_entera> 
;R81:	<exp> ::= <constante> 
;D:	)
;R73:	<exp> ::= <exp> - <exp> 
;R92:	<resto_lista_expresiones> ::=  
;R89:	<lista_expresiones> ::= <exp> <resto_lista_expresiones> 
;R88:	<exp> ::= <identificador> ( <lista_expresiones> ) 
;D:	;
;R43:	<asignacion> ::= <identificador> = <exp> 
;R34:	<sentencia_simple> ::= <asignacion> 
;R32:	<sentencia> ::= <sentencia_simple> ; 
;D:	res2
;D:	=
;D:	fibonacci
;D:	(
;D:	num1
;D:	-
;R80:	<exp> ::= <identificador> 
;D:	2
;R104:	<constante_entera> ::= TOK_CONSTANTE_ENTERA 
;R100:	<constante> ::= <constante_entera> 
;R81:	<exp> ::= <constante> 
;D:	)
;R73:	<exp> ::= <exp> - <exp> 
;R92:	<resto_lista_expresiones> ::=  
;R89:	<lista_expresiones> ::= <exp> <resto_lista_expresiones> 
;R88:	<exp> ::= <identificador> ( <lista_expresiones> ) 
;D:	;
;R43:	<asignacion> ::= <identificador> = <exp> 
;R34:	<sentencia_simple> ::= <asignacion> 
;R32:	<sentencia> ::= <sentencia_simple> ; 
;D:	return
;D:	res1
;D:	+
;R80:	<exp> ::= <identificador> 
;D:	res2
;D:	;
;R80:	<exp> ::= <identificador> 
;R72:	<exp> ::= <exp> + <exp> 
;R61:	<retorno_funcion> ::= return <exp> 
;R38:	<sentencia_simple> ::= <retorno_funcion> 
;R32:	<sentencia> ::= <sentencia_simple> ; 
;D:	}
;R30:	<sentencias> ::= <sentencia> 
;R31:	<sentencias> ::= <sentencia> <sentencias> 
;R31:	<sentencias> ::= <sentencia> <sentencias> 
;R31:	<sentencias> ::= <sentencia> <sentencias> 
;R31:	<sentencias> ::= <sentencia> <sentencias> 
;R22:	<funcion> ::= function <tipo> <identificador> ( <parametros_funcion> ) { <declaraciones_funcion> <sentencias> } 
;D:	scanf
;R21:	<funciones> ::= 
;R20:	<funciones> ::= <funcion> <funciones> 
;D:	x
;R54:	<lectura> ::= scanf <identificador> 
;R35:	<sentencia_simple> ::= <lectura> 
;D:	;
;R32:	<sentencia> ::= <sentencia_simple> ; 
;D:	resultado
;D:	=
;D:	fibonacci
;D:	(
;D:	x
;D:	)
;R80:	<exp> ::= <identificador> 
;R92:	<resto_lista_expresiones> ::=  
;R89:	<lista_expresiones> ::= <exp> <resto_lista_expresiones> 
;R88:	<exp> ::= <identificador> ( <lista_expresiones> ) 
;D:	;
;R43:	<asignacion> ::= <identificador> = <exp> 
;R34:	<sentencia_simple> ::= <asignacion> 
;R32:	<sentencia> ::= <sentencia_simple> ; 
;D:	printf
;D:	resultado
;D:	;
;R80:	<exp> ::= <identificador> 
;R56:	<escritura> ::= printf <exp> 
;R36:	<sentencia_simple> ::= <escritura> 
;R32:	<sentencia> ::= <sentencia_simple> ; 
;D:	}
;R30:	<sentencias> ::= <sentencia> 
;R31:	<sentencias> ::= <sentencia> <sentencias> 
;R31:	<sentencias> ::= <sentencia> <sentencias> 
;R1:	<programa> ::= main { <declaraciones> <funciones> <sentencias> } 
